{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class InterviewService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8000/api/admission';\n  }\n  startInterview() {\n    return this.http.post(`${this.baseUrl}/interview/start`, {}, {\n      withCredentials: true\n    });\n  }\n  submitInterview(answers) {\n    const body = {\n      answers\n    };\n    return this.http.post(`${this.baseUrl}/submit`, body, {\n      withCredentials: true\n    });\n  }\n  getInterview(userId) {\n    const url = `${this.baseUrl}/interview/${userId}`;\n    return this.http.get(url);\n  }\n  getInterviews() {\n    const url = `${this.baseUrl}/interviews`;\n    return this.http.get(url);\n  }\n}\nInterviewService.ɵfac = function InterviewService_Factory(t) {\n  return new (t || InterviewService)(i0.ɵɵinject(i1.HttpClient));\n};\nInterviewService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: InterviewService,\n  factory: InterviewService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["InterviewService","constructor","http","baseUrl","startInterview","post","withCredentials","submitInterview","answers","body","getInterview","userId","url","get","getInterviews","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\arijs\\Desktop\\Application\\Frontend\\src\\app\\services\\interview.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Interview } from '../model/interview.model';\n@Injectable({\n  providedIn: 'root'\n})\nexport class InterviewService {\n\n  private baseUrl = 'http://localhost:8000/api/admission'; \n\n  constructor(private http: HttpClient) {}\n\n  startInterview(): Observable<any> {\n    return this.http.post(`${this.baseUrl}/interview/start`, {},{ withCredentials: true});\n  }\n\n  submitInterview(answers:any): Observable<any> {\n    const body = { answers };\n    return this.http.post(`${this.baseUrl}/submit`, body, { withCredentials: true });\n  }\n  getInterview(userId: string): Observable<Interview> {\n    const url = `${this.baseUrl}/interview/${userId}`;\n    return this.http.get<Interview>(url);\n  }\n  getInterviews(): Observable<Interview[]> {\n    const url = `${this.baseUrl}/interviews`;\n    return this.http.get<Interview[]>(url);\n  }\n}\n"],"mappings":";;AAOA,OAAM,MAAOA,gBAAgB;EAI3BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,qCAAqC;EAEhB;EAEvCC,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAC,GAAG,IAAI,CAACF,OAAO,kBAAkB,EAAE,EAAE,EAAC;MAAEG,eAAe,EAAE;IAAI,CAAC,CAAC;EACvF;EAEAC,eAAeA,CAACC,OAAW;IACzB,MAAMC,IAAI,GAAG;MAAED;IAAO,CAAE;IACxB,OAAO,IAAI,CAACN,IAAI,CAACG,IAAI,CAAC,GAAG,IAAI,CAACF,OAAO,SAAS,EAAEM,IAAI,EAAE;MAAEH,eAAe,EAAE;IAAI,CAAE,CAAC;EAClF;EACAI,YAAYA,CAACC,MAAc;IACzB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACT,OAAO,cAAcQ,MAAM,EAAE;IACjD,OAAO,IAAI,CAACT,IAAI,CAACW,GAAG,CAAYD,GAAG,CAAC;EACtC;EACAE,aAAaA,CAAA;IACX,MAAMF,GAAG,GAAG,GAAG,IAAI,CAACT,OAAO,aAAa;IACxC,OAAO,IAAI,CAACD,IAAI,CAACW,GAAG,CAAcD,GAAG,CAAC;EACxC;;AArBWZ,gBAAgB,C;mBAAhBA,gBAAgB,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAhBlB,gBAAgB,C;SAAhBA,gBAAgB;EAAAmB,OAAA,EAAhBnB,gBAAgB,CAAAoB,IAAA;EAAAC,UAAA,EAFf;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}