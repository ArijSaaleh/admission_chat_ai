{"ast":null,"code":"import { catchError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RegistrationService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8000/api/user';\n  }\n  registerUser(username, password, role, AdministrativeID) {\n    const body = {\n      username,\n      password,\n      role,\n      AdministrativeID\n    };\n    if (role === 'admin') {\n      body.AdministrativeID = AdministrativeID;\n    }\n    console.log(body);\n    return this.http.post(`${this.apiUrl}/register`, body).pipe(catchError(error => {\n      if (error.status === 400) {\n        // Handle validation errors\n        const validationErrors = error.error;\n        console.log('Validation errors:', validationErrors);\n        // Display appropriate messages to the user or update the form with the error messages\n      } else {\n        // Handle other types of errors\n        console.error('Registration failed:', error);\n        // Display a generic error message to the user\n      }\n      // Throw the error to propagate it to the component\n      throw error;\n    }));\n  }\n}\nRegistrationService.ɵfac = function RegistrationService_Factory(t) {\n  return new (t || RegistrationService)(i0.ɵɵinject(i1.HttpClient));\n};\nRegistrationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RegistrationService,\n  factory: RegistrationService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","RegistrationService","constructor","http","apiUrl","registerUser","username","password","role","AdministrativeID","body","console","log","post","pipe","error","status","validationErrors","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\arijs\\Desktop\\Application\\Frontend\\src\\app\\services\\registration.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, catchError } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class RegistrationService {\r\n    private apiUrl = 'http://localhost:8000/api/user';\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    registerUser(username: string, password: string, role: string, AdministrativeID: string): Observable<any> {\r\n        const body = { username, password, role, AdministrativeID }\r\n        if (role === 'admin') {\r\n            body.AdministrativeID = AdministrativeID;\r\n          }\r\n        console.log(body)\r\n\r\n        return this.http.post(`${this.apiUrl}/register`, body).pipe(\r\n\r\n            catchError((error: HttpErrorResponse) => {\r\n                if (error.status === 400) {\r\n                    // Handle validation errors\r\n                    const validationErrors = error.error;\r\n                    console.log('Validation errors:', validationErrors);\r\n                    // Display appropriate messages to the user or update the form with the error messages\r\n                } else {\r\n                    // Handle other types of errors\r\n                    console.error('Registration failed:', error);\r\n                    // Display a generic error message to the user\r\n                }\r\n                // Throw the error to propagate it to the component\r\n                throw error;\r\n            })\r\n        );\r\n    }\r\n\r\n}\r\n"],"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;;;AAK7C,OAAM,MAAOC,mBAAmB;EAG5BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,gCAAgC;EAET;EAExCC,YAAYA,CAACC,QAAgB,EAAEC,QAAgB,EAAEC,IAAY,EAAEC,gBAAwB;IACnF,MAAMC,IAAI,GAAG;MAAEJ,QAAQ;MAAEC,QAAQ;MAAEC,IAAI;MAAEC;IAAgB,CAAE;IAC3D,IAAID,IAAI,KAAK,OAAO,EAAE;MAClBE,IAAI,CAACD,gBAAgB,GAAGA,gBAAgB;;IAE5CE,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IAEjB,OAAO,IAAI,CAACP,IAAI,CAACU,IAAI,CAAC,GAAG,IAAI,CAACT,MAAM,WAAW,EAAEM,IAAI,CAAC,CAACI,IAAI,CAEvDd,UAAU,CAAEe,KAAwB,IAAI;MACpC,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QACtB;QACA,MAAMC,gBAAgB,GAAGF,KAAK,CAACA,KAAK;QACpCJ,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEK,gBAAgB,CAAC;QACnD;OACH,MAAM;QACH;QACAN,OAAO,CAACI,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5C;;MAEJ;MACA,MAAMA,KAAK;IACf,CAAC,CAAC,CACL;EACL;;AA7BSd,mBAAmB,C;mBAAnBA,mBAAmB,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAnBpB,mBAAmB,C;SAAnBA,mBAAmB;EAAAqB,OAAA,EAAnBrB,mBAAmB,CAAAsB,IAAA;EAAAC,UAAA,EAFhB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}